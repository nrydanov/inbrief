// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/fetcher/fetch.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	proto "dsc/inbrief/scraper/gen/proto/fetcher"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FetcherServiceName is the fully-qualified name of the FetcherService service.
	FetcherServiceName = "fetcher.FetcherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FetcherServiceFetchProcedure is the fully-qualified name of the FetcherService's Fetch RPC.
	FetcherServiceFetchProcedure = "/fetcher.FetcherService/Fetch"
)

// FetcherServiceClient is a client for the fetcher.FetcherService service.
type FetcherServiceClient interface {
	Fetch(context.Context, *connect.Request[proto.FetchRequest]) (*connect.Response[proto.FetchResponse], error)
}

// NewFetcherServiceClient constructs a client for the fetcher.FetcherService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFetcherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FetcherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fetcherServiceMethods := proto.File_proto_fetcher_fetch_proto.Services().ByName("FetcherService").Methods()
	return &fetcherServiceClient{
		fetch: connect.NewClient[proto.FetchRequest, proto.FetchResponse](
			httpClient,
			baseURL+FetcherServiceFetchProcedure,
			connect.WithSchema(fetcherServiceMethods.ByName("Fetch")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fetcherServiceClient implements FetcherServiceClient.
type fetcherServiceClient struct {
	fetch *connect.Client[proto.FetchRequest, proto.FetchResponse]
}

// Fetch calls fetcher.FetcherService.Fetch.
func (c *fetcherServiceClient) Fetch(ctx context.Context, req *connect.Request[proto.FetchRequest]) (*connect.Response[proto.FetchResponse], error) {
	return c.fetch.CallUnary(ctx, req)
}

// FetcherServiceHandler is an implementation of the fetcher.FetcherService service.
type FetcherServiceHandler interface {
	Fetch(context.Context, *connect.Request[proto.FetchRequest]) (*connect.Response[proto.FetchResponse], error)
}

// NewFetcherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFetcherServiceHandler(svc FetcherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fetcherServiceMethods := proto.File_proto_fetcher_fetch_proto.Services().ByName("FetcherService").Methods()
	fetcherServiceFetchHandler := connect.NewUnaryHandler(
		FetcherServiceFetchProcedure,
		svc.Fetch,
		connect.WithSchema(fetcherServiceMethods.ByName("Fetch")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fetcher.FetcherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FetcherServiceFetchProcedure:
			fetcherServiceFetchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFetcherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFetcherServiceHandler struct{}

func (UnimplementedFetcherServiceHandler) Fetch(context.Context, *connect.Request[proto.FetchRequest]) (*connect.Response[proto.FetchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fetcher.FetcherService.Fetch is not implemented"))
}
